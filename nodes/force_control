#!/usr/bin/env python3


import argparse

import rospy
import numpy as np
from geometry_msgs.msg import Pose, Point, Quaternion
from intera_core_msgs.msg import JointCommand, InteractionControlCommand
from intera_motion_interface import (InteractionOptions, InteractionPublisher)
import intera_external_devices
import intera_interface
import intera_control
from intera_interface import CHECK_VERSION
from sensor_msgs.msg import JointState
from std_msgs.msg import Header, Float32, Int8
from std_srvs.srv import Empty, EmptyResponse
from sawyer_move.msg import YoyoState, RobotControl
from sawyer_move.msg import RobotState
import pygame


import actionlib

from control_msgs.msg import (
    FollowJointTrajectoryAction,
    FollowJointTrajectoryGoal,
)
from copy import copy
from trajectory_msgs.msg import (
    JointTrajectoryPoint,
)

import PyKDL as kdl
import kdl_parser_py.urdf as kdl_parser

import time



class SawyerMove:

    def __init__(self, robot_origin_from_ground) -> None:
        self.start_flag = False
        self.start_pub = rospy.Publisher('start', Int8, queue_size=10)

        #self.yoyo_vel_sub = rospy.Subscriber('yoyo_vel', Float32, self.vel_callback)
        self.yoyo_state_sub = rospy.Subscriber('yoyo_state', YoyoState, self.state_callback)

        self.yoyo_rot = 0.0
        self.yoyo_rotvel = 0.0
        
        self.joint_state_sub = rospy.Subscriber('/robot/joint_states', JointState, self.jss_callback)
        self.joint_action_pub = rospy.Publisher('/robot/limb/right/joint_command', JointCommand, queue_size=10)

        self.robot_control_sub = rospy.Subscriber('robot_control', RobotControl, self.control_callback)
        self.robot_state_pub = rospy.Publisher('robot_state', RobotState, queue_size=10)
        #self.ee_z_pos_pub = rospy.Publisher('ee_z_pos', Float32, queue_size=10)
        self.ee_z_pos = 1.58
        self.robot_origin_from_ground = robot_origin_from_ground
        #self.start_srv = rospy.Service("start", Empty, self.start_callback)
        self.curr_joint_pos = np.zeros(9)
        self.joint_names = []


        self.timer = time.time()
        self.move_mag = 1.0
        self.torque_mag = 0.0
        self.vel_mag = 0.0
        self.yc = 0.4
        self.xc = 0.4

        
        self.adjust = 0

        self.preparing_joint = True

        self.setup_jac()


        self.control_type = "zero" #simple || kle || zero
        self.kle_mag = 0.0

        #force control
        self.force_pub = rospy.Publisher('/robot/limb/right/interaction_control_command',
                                   InteractionControlCommand, queue_size=1,
                                   tcp_nodelay=True)
        self.enable = intera_interface.RobotEnable(CHECK_VERSION)

        self.diff_from_origin = 0.0
        self.sum_diff_from_origin = 0.0

    def setup_jac(self):
        # load in ros parameters
        self.baselink = rospy.get_param("sawyer/baselink")
        self.endlink = rospy.get_param("sawyer/endlink")
        flag, self.tree = kdl_parser.treeFromParam("/robot_description")

        self.joint_names = rospy.get_param("named_poses/right/joint_names")
        print (self.joint_names)

        # build kinematic chain and fk and jacobian solvers
        chain_ee = self.tree.getChain(self.baselink, self.endlink)
        self.fk_ee = kdl.ChainFkSolverPos_recursive(chain_ee)
        self.jac_ee = kdl.ChainJntToJacSolver(chain_ee)

        # building robot joint state
        self.num_joints = chain_ee.getNrOfJoints()
        self.joints = kdl.JntArray(self.num_joints)


        self.jac_mat = []



    def kdl_to_mat(self, m):
        mat =  np.mat(np.zeros((m.rows(), m.columns())))
        for i in range(m.rows()):
            for j in range(m.columns()):
                mat[i,j] = m[i,j]
        return np.array(mat)


    def state_callback(self, data):
        self.yoyo_rot = data.yoyo_rot
        self.yoyo_rotvel = data.yoyo_rotvel

    def control_callback(self, data):
        self.kle_mag = data.ee_z_vel

    def jss_callback(self, data):
        self.curr_joint_pos = data.position

        #self.joint_names = data.name

        if self.start_flag:

            if len(data.name) > 1:
                for i, n in enumerate(self.joint_names):
                    index = data.name.index(n)
                    self.joints[i] = data.position[index]

            frame = kdl.Frame()
            self.fk_ee.JntToCart(self.joints, frame)
            # print(" ")
            # print("position: ")
            # print(frame.p)
            # print("orientation")
            # print(frame.M)
            # print(" ")
            

            self.ee_z_pos = frame.p[2] + self.robot_origin_from_ground

            self.diff_from_origin = abs(frame.p[2] - 0.587)

            if self.control_type == "simple":
                if self.adjust == 0 and frame.p[2] > 0.75:
                    self.adjust = 1

                if self.diff_from_origin < 0.01:
                    self.adjust = 0
            

            jacobian = kdl.Jacobian(self.num_joints)
            self.jac_ee.JntToJac(self.joints, jacobian)

            self.jac_mat = self.kdl_to_mat(jacobian)
        



    def loop(self):
        if self.start_flag:

            if self.control_type == "simple":
                if self.adjust == 0 and self.yoyo_rot < 30 and self.yoyo_rotvel < 0.0: 
                    self.sum_diff_from_origin = 0.0   
                    self.send_force_command(-30.0) #500.0

                elif self.adjust == 1:
                    self.sum_diff_from_origin += self.diff_from_origin

                    integral = self.sum_diff_from_origin*5
                    proportional = self.diff_from_origin*5
                    down_force = proportional + integral
                    
                    if down_force > 30.0:
                        down_force = 30.0

                    self.send_force_command(down_force)

            elif self.control_type == "kle":
                ...

            else:
                ...

            
            robot_state = RobotState()
            robot_state.ee_z_pos = self.ee_z_pos
            robot_state.ee_z_vel = self.vel_mag
            self.robot_state_pub.publish(robot_state)


            if self.ee_z_pos > 1.40:
                self.start_pub.publish(Int8(1))
            else:
                self.start_pub.publish(Int8(0))




    def send_force_command(self, z_force):
        icc = InteractionControlCommand()
        icc.header = Header()
        icc.header.stamp = rospy.Time.now()
        
        icc.interaction_control_active = True
        icc.K_impedance = [1300, 1300, 1300, 30, 30, 30]
        icc.max_impedance = [True, True, True, True, True, True]
        icc.D_impedance = []
        icc.K_nullspace = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        icc.interaction_control_mode = [1,1,2,1,1,1]
        icc.force_command = [0.0,0.0,z_force,0.0,0.0,0.0]
        icc.interaction_frame = Pose(position=Point(x=0.0,y=0.0,z=0.0), orientation=Quaternion(x=0.0,y=0.0,z=0.0,w=1.0))
        icc.endpoint_name = "right_hand"
        icc.in_endpoint_frame = True
        icc.disable_damping_in_force_control = True
        icc.disable_reference_resetting = False
        icc.rotations_for_constrained_zeroG = False
        #print("publishing interaction command")
        self.force_pub.publish(icc)


    def enter_position_mode(self):
        rospy.sleep(0.5)

        icc = InteractionControlCommand()
        icc.header = Header()
        icc.header.stamp = rospy.Time.now()
        
        icc.interaction_control_active = False
        icc.K_impedance = []
        icc.max_impedance = []
        icc.D_impedance = []
        icc.K_nullspace = []
        icc.interaction_control_mode = []
        icc.force_command = []
        icc.interaction_frame = Pose(position=Point(x=0.0,y=0.0,z=0.0), orientation=Quaternion(x=0.0,y=0.0,z=0.0,w=1.0))
        icc.endpoint_name = "right_hand"
        icc.in_endpoint_frame = False
        icc.disable_damping_in_force_control = False
        icc.disable_reference_resetting = False
        icc.rotations_for_constrained_zeroG = False
        #print("publishing interaction command for position")
        self.force_pub.publish(icc)

    



def main():
    print('ok')

    rospy.init_node('sawyer_move')
    r = rospy.Rate(50)

    robot_origin_from_ground = rospy.get_param("robot_origin_from_ground")
    sm = SawyerMove(robot_origin_from_ground)

    pygame.init()
    screen = pygame.display.set_mode((100,100))

    #gripper
    rp = intera_interface.RobotParams()
    valid_limbs = rp.get_limb_names()
    print("Getting robot state...")
    rs = intera_interface.RobotEnable(CHECK_VERSION)
    rs.enable()


    gripper = None
    gripper = intera_interface.Gripper(valid_limbs[0] + '_gripper')
    gripper.set_cmd_velocity(gripper.MAX_VELOCITY)
    gripper.set_position(0.010)
    close_pos = 0.021
    open_pos = 0.10
    gripper.set_position(close_pos)

#0.371, #0.158
#0.5cm



    sm.enter_position_mode()
    

    limb = intera_interface.Limb(valid_limbs[0])
    joints = limb.joint_names()
    a = np.deg2rad(-90)
    b = np.deg2rad(90)
    c = np.deg2rad(90)
    goal_joints = {joints[0]:0.0, joints[1]:a, joints[2]:0.0, joints[3]:b, joints[4]:0.0, 
                    joints[5]:c, joints[6]:1.70}
    limb.move_to_joint_positions(goal_joints)

    rospy.sleep(1.0)

    print("done")


    while not rospy.is_shutdown():
        for event in pygame.event.get():

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_q:
                    sm.start_flag = True
                    gripper.open()
                    rospy.sleep(0.3)
                    gripper.close()
                    sm.torque_mag = 0.0#0.07

        keys_pressed = pygame.key.get_pressed()

        if keys_pressed[pygame.K_z]:
            sm.torque_mag = 0.0

        sm.loop()
        r.sleep()




if __name__ == '__main__':
    main()