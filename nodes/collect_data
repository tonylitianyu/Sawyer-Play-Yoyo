#!/usr/bin/env python3

""" 
This node record all data and save into a txt file (later used for training the Koopman)

SUBSCRIBERS:
  + <yoyo_state_sub> (<YoyoState>) ~ the state of the yoyo (pos, vel)
  + <robot_state_sub> (<RobotState>) ~ the state of the robot (could be the endpoint pos or joint pos)
  + <robot_control_sub> (<RobotControl>) ~ the robot control calculated by the KL-ergodic-MPC
  + <start_sub> (<Int8>) ~ the flag for start recording data
  
"""


import rospy
import numpy as np
from std_msgs.msg import Float32, Int8
from datetime import datetime
from sawyer_move.msg import YoyoState, RobotState, RobotControl
import time as time
import os


class Collect:
    def __init__(self) -> None:
        """Init a data collecting object
        """
        # self.yoyo_pos_sub = rospy.Subscriber('yoyo_pos', Float32, self.pos_callback)
        # self.yoyo_rot_sub = rospy.Subscriber('yoyo_rot', Float32, self.rot_callback)
        self.yoyo_state_sub = rospy.Subscriber('yoyo_state', YoyoState, self.state_callback)

        self.robot_state_sub = rospy.Subscriber('robot_state', RobotState, self.robot_state_callback)

        self.kle_sub = rospy.Subscriber('robot_control', RobotControl, self.kle_callback)

        self.start_sub = rospy.Subscriber('start', Int8, self.start_callback)
        self.start = 0

        date_time = datetime.now().strftime("%m%d%Y_%H%M%S")
        self.file = open("/home/tianyu/yoyo_ws/src/sawyer_move/data/"+date_time+".txt", "w+")

        self.curr_yoyo_pos = 0.0
        self.last_yoyo_pos = 0.0
        self.curr_yoyo_pos_vel = 0.0
        

        self.curr_yoyo_rot = 0.0
        self.last_yoyo_rot = 0.0
        self.curr_yoyo_rot_vel = 0.0
        

        self.ee_z_vel = 0.0
        self.kle_vel = 0.0


        self.ee_z_pos = 0.0
        
        self.t_0 = time.time()
        self.last_yoyo_pos_time = self.t_0
        self.last_yoyo_rot_time = self.t_0

    # def pos_callback(self, data):
    #     curr_time = time.time() 
    #     self.curr_yoyo_pos = data.data
    #     self.curr_yoyo_pos_vel = (self.curr_yoyo_pos - self.last_yoyo_pos)/(curr_time - self.last_yoyo_pos_time)
    #     self.last_yoyo_pos = self.curr_yoyo_pos
    #     self.last_yoyo_pos_time = curr_time

    # def rot_callback(self, data):
    #     curr_time = time.time()
    #     self.curr_yoyo_rot = data.data
    #     self.curr_yoyo_rot_vel = (self.curr_yoyo_rot - self.last_yoyo_rot)/(curr_time - self.last_yoyo_rot_time)
    #     self.last_yoyo_rot = self.curr_yoyo_rot
    #     self.last_yoyo_rot_time = curr_time



    def state_callback(self, data):
        """callback function for the yoyo state subscriber
            Args:
                data (YoyoState) - the current state of the yoyo
        """
        self.curr_yoyo_pos = data.yoyo_pos
        self.curr_yoyo_pos_vel = data.yoyo_posvel
        self.curr_yoyo_rot = data.yoyo_rot
        self.curr_yoyo_rot_vel = data.yoyo_rotvel

    def robot_state_callback(self, data):
        """callback function for the robot state subscriber
            Args:
                data (RobotState) - the current state of the robot arm
        """
        self.ee_z_pos = data.ee_z_pos
        self.ee_z_vel = data.ee_z_vel

    def start_callback(self, data):
        """callback function for the start flag
            Args:
                data (Int8) - the current state of the start flag
        """
        self.start = data.data

    def kle_callback(self, data):
        """callback function for the kle-mpc controller
            Args:
                data (RobotControl) - the current control given by the controller
        """
        self.kle_vel = data.ee_z_vel

    def write_data_to_file(self):
        """Save data to txt file for later use
        """
        if self.start == 1:

            single_line = [str(time.time() - self.t_0), str(self.curr_yoyo_pos), str(self.curr_yoyo_pos_vel), str(self.curr_yoyo_rot), str(self.curr_yoyo_rot_vel), str(self.ee_z_pos), str(self.ee_z_vel), str(self.kle_vel)]

            delim = ", "
            self.file.write(delim.join(single_line) + "\n")



def main():
    """ The main() function. """
    rospy.init_node('collect_data')
    r = rospy.Rate(100)

    collect = Collect()


    while not rospy.is_shutdown():
        collect.write_data_to_file()
        r.sleep()


if __name__ == '__main__':
    main()